//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace DataSchema
{
    #pragma warning disable // Disable all warnings

    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class LineMapping
    {
    
        private string _name;
    
        private int _line;
    
        /// <summary>
        /// The alias of this line (e.g. OdorA, FinalValve)
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        [System.ComponentModel.DescriptionAttribute("The alias of this line (e.g. OdorA, FinalValve)")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        /// <summary>
        /// The digital line associated with this mapping
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="line")]
        [System.ComponentModel.DescriptionAttribute("The digital line associated with this mapping")]
        public int Line
        {
            get
            {
                return _line;
            }
            set
            {
                _line = value;
            }
        }
    
        public System.IObservable<LineMapping> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new LineMapping
                {
                    Name = _name,
                    Line = _line
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class LineCommand
    {
    
        private string _lineName;
    
        private LineCommandState _state;
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="lineName")]
        public string LineName
        {
            get
            {
                return _lineName;
            }
            set
            {
                _lineName = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="state")]
        public LineCommandState State
        {
            get
            {
                return _state;
            }
            set
            {
                _state = value;
            }
        }
    
        public System.IObservable<LineCommand> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new LineCommand
                {
                    LineName = _lineName,
                    State = _state
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class CameraProperties
    {
    
        private double _imagingRate;
    
        private int _preEventBufferFrames;
    
        private int _postEventBufferFrames;
    
        /// <summary>
        /// The imaging rate in frames / s
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="imagingRate")]
        [System.ComponentModel.DescriptionAttribute("The imaging rate in frames / s")]
        public double ImagingRate
        {
            get
            {
                return _imagingRate;
            }
            set
            {
                _imagingRate = value;
            }
        }
    
        /// <summary>
        /// The number of frames pre-event to include in the event buffer
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="preEventBufferFrames")]
        [System.ComponentModel.DescriptionAttribute("The number of frames pre-event to include in the event buffer")]
        public int PreEventBufferFrames
        {
            get
            {
                return _preEventBufferFrames;
            }
            set
            {
                _preEventBufferFrames = value;
            }
        }
    
        /// <summary>
        /// The number of frames post-event to include in the event buffer
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="postEventBufferFrames")]
        [System.ComponentModel.DescriptionAttribute("The number of frames post-event to include in the event buffer")]
        public int PostEventBufferFrames
        {
            get
            {
                return _postEventBufferFrames;
            }
            set
            {
                _postEventBufferFrames = value;
            }
        }
    
        public System.IObservable<CameraProperties> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new CameraProperties
                {
                    ImagingRate = _imagingRate,
                    PreEventBufferFrames = _preEventBufferFrames,
                    PostEventBufferFrames = _postEventBufferFrames
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class DelphiSession
    {
    
        private Metadata _metadata;
    
        private LineMappings _lineMappings;
    
        private CameraProperties _cameraProperties;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="metadata")]
        public Metadata Metadata
        {
            get
            {
                return _metadata;
            }
            set
            {
                _metadata = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="lineMappings")]
        public LineMappings LineMappings
        {
            get
            {
                return _lineMappings;
            }
            set
            {
                _lineMappings = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="cameraProperties")]
        public CameraProperties CameraProperties
        {
            get
            {
                return _cameraProperties;
            }
            set
            {
                _cameraProperties = value;
            }
        }
    
        public System.IObservable<DelphiSession> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new DelphiSession
                {
                    Metadata = _metadata,
                    LineMappings = _lineMappings,
                    CameraProperties = _cameraProperties
                }));
        }
    }


    public enum LineCommandState
    {
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="open")]
        Open = 0,
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="close")]
        Close = 1,
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Metadata
    {
    
        private string _animalId = "";
    
        private string _loggingRootPath = "";
    
        private double _maximumPokeTime = 10D;
    
        private double _robocopyTimeInterval = 3600D;
    
        private bool _showHarpLeds = false;
    
        private double _maxVideoLength = 120D;
    
        private double _maxOdorDelivery = 8D;
    
        private bool _useVacuum = true;
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="animalId")]
        public string AnimalId
        {
            get
            {
                return _animalId;
            }
            set
            {
                _animalId = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="loggingRootPath")]
        public string LoggingRootPath
        {
            get
            {
                return _loggingRootPath;
            }
            set
            {
                _loggingRootPath = value;
            }
        }
    
        /// <summary>
        /// Maximum poke time. Poke should be aborted after this time in seconds
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="maximumPokeTime")]
        [System.ComponentModel.DescriptionAttribute("Maximum poke time. Poke should be aborted after this time in seconds")]
        public double MaximumPokeTime
        {
            get
            {
                return _maximumPokeTime;
            }
            set
            {
                _maximumPokeTime = value;
            }
        }
    
        /// <summary>
        /// Interval between robocopy initiations in seconds
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="robocopyTimeInterval")]
        [System.ComponentModel.DescriptionAttribute("Interval between robocopy initiations in seconds")]
        public double RobocopyTimeInterval
        {
            get
            {
                return _robocopyTimeInterval;
            }
            set
            {
                _robocopyTimeInterval = value;
            }
        }
    
        /// <summary>
        /// Whether HARP device LEDs should be on
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="showHarpLeds")]
        [System.ComponentModel.DescriptionAttribute("Whether HARP device LEDs should be on")]
        public bool ShowHarpLeds
        {
            get
            {
                return _showHarpLeds;
            }
            set
            {
                _showHarpLeds = value;
            }
        }
    
        /// <summary>
        /// Maximum allowed length of individual video files in seconds
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="maxVideoLength")]
        [System.ComponentModel.DescriptionAttribute("Maximum allowed length of individual video files in seconds")]
        public double MaxVideoLength
        {
            get
            {
                return _maxVideoLength;
            }
            set
            {
                _maxVideoLength = value;
            }
        }
    
        /// <summary>
        /// Maximum allowed length of odor deliveries in seconds
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="maxOdorDelivery")]
        [System.ComponentModel.DescriptionAttribute("Maximum allowed length of odor deliveries in seconds")]
        public double MaxOdorDelivery
        {
            get
            {
                return _maxOdorDelivery;
            }
            set
            {
                _maxOdorDelivery = value;
            }
        }
    
        /// <summary>
        /// Whether to use vacuum line during odor presentations
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="useVacuum")]
        [System.ComponentModel.DescriptionAttribute("Whether to use vacuum line during odor presentations")]
        public bool UseVacuum
        {
            get
            {
                return _useVacuum;
            }
            set
            {
                _useVacuum = value;
            }
        }
    
        public System.IObservable<Metadata> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Metadata
                {
                    AnimalId = _animalId,
                    LoggingRootPath = _loggingRootPath,
                    MaximumPokeTime = _maximumPokeTime,
                    RobocopyTimeInterval = _robocopyTimeInterval,
                    ShowHarpLeds = _showHarpLeds,
                    MaxVideoLength = _maxVideoLength,
                    MaxOdorDelivery = _maxOdorDelivery,
                    UseVacuum = _useVacuum
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class LineMappings
    {
    
        private System.Collections.Generic.List<LineMapping> _digitalMap = new System.Collections.Generic.List<LineMapping>();
    
        private int _auxLine = 0;
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="digitalMap")]
        public System.Collections.Generic.List<LineMapping> DigitalMap
        {
            get
            {
                return _digitalMap;
            }
            set
            {
                _digitalMap = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="auxLine")]
        public int AuxLine
        {
            get
            {
                return _auxLine;
            }
            set
            {
                _auxLine = value;
            }
        }
    
        public System.IObservable<LineMappings> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new LineMappings
                {
                    DigitalMap = _digitalMap,
                    AuxLine = _auxLine
                }));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<LineMapping> source)
        {
            return Process<LineMapping>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LineCommand> source)
        {
            return Process<LineCommand>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CameraProperties> source)
        {
            return Process<CameraProperties>(source);
        }

        public System.IObservable<string> Process(System.IObservable<DelphiSession> source)
        {
            return Process<DelphiSession>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Metadata> source)
        {
            return Process<Metadata>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LineMappings> source)
        {
            return Process<LineMappings>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LineMapping>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LineCommand>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CameraProperties>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<DelphiSession>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Metadata>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LineMappings>))]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<DelphiSession>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}