//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace DataSchema
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class LineMapping
    {
    
        private string _name;
    
        private int _line;
    
        public LineMapping()
        {
        }
    
        protected LineMapping(LineMapping other)
        {
            _name = other._name;
            _line = other._line;
        }
    
        /// <summary>
        /// The alias of this line (e.g. OdorA, FinalValve)
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        [System.ComponentModel.DescriptionAttribute("The alias of this line (e.g. OdorA, FinalValve)")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        /// <summary>
        /// The digital line associated with this mapping
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="line")]
        [System.ComponentModel.DescriptionAttribute("The digital line associated with this mapping")]
        public int Line
        {
            get
            {
                return _line;
            }
            set
            {
                _line = value;
            }
        }
    
        public System.IObservable<LineMapping> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LineMapping(this)));
        }
    
        public System.IObservable<LineMapping> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LineMapping(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("line = " + _line);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class LineCommand
    {
    
        private string _lineName;
    
        private bool _state = false;
    
        public LineCommand()
        {
        }
    
        protected LineCommand(LineCommand other)
        {
            _lineName = other._lineName;
            _state = other._state;
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="lineName")]
        public string LineName
        {
            get
            {
                return _lineName;
            }
            set
            {
                _lineName = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="state")]
        public bool State
        {
            get
            {
                return _state;
            }
            set
            {
                _state = value;
            }
        }
    
        public System.IObservable<LineCommand> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LineCommand(this)));
        }
    
        public System.IObservable<LineCommand> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LineCommand(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("lineName = " + _lineName + ", ");
            stringBuilder.Append("state = " + _state);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class CameraCommand
    {
    
        private bool _state = false;
    
        public CameraCommand()
        {
        }
    
        protected CameraCommand(CameraCommand other)
        {
            _state = other._state;
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="state")]
        public bool State
        {
            get
            {
                return _state;
            }
            set
            {
                _state = value;
            }
        }
    
        public System.IObservable<CameraCommand> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new CameraCommand(this)));
        }
    
        public System.IObservable<CameraCommand> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new CameraCommand(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("state = " + _state);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class CameraProperties
    {
    
        private double _imagingRate;
    
        private int _exposureTime = 10000;
    
        private string _serialNumber = "10000000";
    
        private CameraPropertiesPwmOutLine _pwmOutLine = DataSchema.CameraPropertiesPwmOutLine.Pwm0ToOut1;
    
        private double _preEventTime = 2.5D;
    
        private double _postEventTime = 2.5D;
    
        public CameraProperties()
        {
        }
    
        protected CameraProperties(CameraProperties other)
        {
            _imagingRate = other._imagingRate;
            _exposureTime = other._exposureTime;
            _serialNumber = other._serialNumber;
            _pwmOutLine = other._pwmOutLine;
            _preEventTime = other._preEventTime;
            _postEventTime = other._postEventTime;
        }
    
        /// <summary>
        /// The imaging rate in frames / s
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="imagingRate")]
        [System.ComponentModel.DescriptionAttribute("The imaging rate in frames / s")]
        public double ImagingRate
        {
            get
            {
                return _imagingRate;
            }
            set
            {
                _imagingRate = value;
            }
        }
    
        /// <summary>
        /// The duration of each exposure in microseconds.
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="exposureTime")]
        [System.ComponentModel.DescriptionAttribute("The duration of each exposure in microseconds.")]
        public int ExposureTime
        {
            get
            {
                return _exposureTime;
            }
            set
            {
                _exposureTime = value;
            }
        }
    
        /// <summary>
        /// The serial number of the Spinnaker camera to connect to.
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="serialNumber")]
        [System.ComponentModel.DescriptionAttribute("The serial number of the Spinnaker camera to connect to.")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Flag defining the mapping of PWM to output line.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pwmOutLine")]
        [System.ComponentModel.DescriptionAttribute("Flag defining the mapping of PWM to output line.")]
        public CameraPropertiesPwmOutLine PwmOutLine
        {
            get
            {
                return _pwmOutLine;
            }
            set
            {
                _pwmOutLine = value;
            }
        }
    
        /// <summary>
        /// The minimum amount of time pre-events to log in video (in seconds)
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="preEventTime")]
        [System.ComponentModel.DescriptionAttribute("The minimum amount of time pre-events to log in video (in seconds)")]
        public double PreEventTime
        {
            get
            {
                return _preEventTime;
            }
            set
            {
                _preEventTime = value;
            }
        }
    
        /// <summary>
        /// The minimum amount of time post-events to log in video (in seconds)
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="postEventTime")]
        [System.ComponentModel.DescriptionAttribute("The minimum amount of time post-events to log in video (in seconds)")]
        public double PostEventTime
        {
            get
            {
                return _postEventTime;
            }
            set
            {
                _postEventTime = value;
            }
        }
    
        public System.IObservable<CameraProperties> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new CameraProperties(this)));
        }
    
        public System.IObservable<CameraProperties> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new CameraProperties(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("imagingRate = " + _imagingRate + ", ");
            stringBuilder.Append("exposureTime = " + _exposureTime + ", ");
            stringBuilder.Append("serialNumber = " + _serialNumber + ", ");
            stringBuilder.Append("pwmOutLine = " + _pwmOutLine + ", ");
            stringBuilder.Append("preEventTime = " + _preEventTime + ", ");
            stringBuilder.Append("postEventTime = " + _postEventTime);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpProperties
    {
    
        private string _comPort = "COM3";
    
        private bool _showHarpLeds = false;
    
        public HarpProperties()
        {
        }
    
        protected HarpProperties(HarpProperties other)
        {
            _comPort = other._comPort;
            _showHarpLeds = other._showHarpLeds;
        }
    
        /// <summary>
        /// COM port to connect HARP board.
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="comPort")]
        [System.ComponentModel.DescriptionAttribute("COM port to connect HARP board.")]
        public string ComPort
        {
            get
            {
                return _comPort;
            }
            set
            {
                _comPort = value;
            }
        }
    
        /// <summary>
        /// Whether HARP device LEDs should be on
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="showHarpLeds")]
        [System.ComponentModel.DescriptionAttribute("Whether HARP device LEDs should be on")]
        public bool ShowHarpLeds
        {
            get
            {
                return _showHarpLeds;
            }
            set
            {
                _showHarpLeds = value;
            }
        }
    
        public System.IObservable<HarpProperties> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpProperties(this)));
        }
    
        public System.IObservable<HarpProperties> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpProperties(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("comPort = " + _comPort + ", ");
            stringBuilder.Append("showHarpLeds = " + _showHarpLeds);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class DelphiSession
    {
    
        private Metadata _metadata;
    
        private LineMappings _lineMappings;
    
        private CameraProperties _cameraProperties;
    
        private HarpProperties _harpProperties;
    
        public DelphiSession()
        {
        }
    
        protected DelphiSession(DelphiSession other)
        {
            _metadata = other._metadata;
            _lineMappings = other._lineMappings;
            _cameraProperties = other._cameraProperties;
            _harpProperties = other._harpProperties;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="metadata")]
        public Metadata Metadata
        {
            get
            {
                return _metadata;
            }
            set
            {
                _metadata = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="lineMappings")]
        public LineMappings LineMappings
        {
            get
            {
                return _lineMappings;
            }
            set
            {
                _lineMappings = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="cameraProperties")]
        public CameraProperties CameraProperties
        {
            get
            {
                return _cameraProperties;
            }
            set
            {
                _cameraProperties = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="harpProperties")]
        public HarpProperties HarpProperties
        {
            get
            {
                return _harpProperties;
            }
            set
            {
                _harpProperties = value;
            }
        }
    
        public System.IObservable<DelphiSession> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new DelphiSession(this)));
        }
    
        public System.IObservable<DelphiSession> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new DelphiSession(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("metadata = " + _metadata + ", ");
            stringBuilder.Append("lineMappings = " + _lineMappings + ", ");
            stringBuilder.Append("cameraProperties = " + _cameraProperties + ", ");
            stringBuilder.Append("harpProperties = " + _harpProperties);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    public enum CameraPropertiesPwmOutLine
    {
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="None")]
        None = 0,
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Pwm0ToOut1")]
        Pwm0ToOut1 = 1,
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Pwm0ToOut2")]
        Pwm0ToOut2 = 2,
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Pwm0ToOut3")]
        Pwm0ToOut3 = 3,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Metadata
    {
    
        private string _animalId = "";
    
        private string _loggingRootPath = "";
    
        private string _remoteTransferRootPath = "";
    
        private double _chargeTime = 0.2D;
    
        private double _minimumPokeTime = 0.01D;
    
        private double _maximumPokeTime = 10D;
    
        private double _robocopyTimeInterval = 3600D;
    
        private double _maxVideoLength = 120D;
    
        private double _minOdorDelivery = 0.1D;
    
        private double _maxOdorDelivery = 8D;
    
        private double _switchTime1 = 0.01D;
    
        private double _switchTime2 = 0.02D;
    
        private double _vacuumDelay = 0.005D;
    
        private double _vacuumDuration = 0.05D;
    
        private bool _useVacuum = true;
    
        public Metadata()
        {
        }
    
        protected Metadata(Metadata other)
        {
            _animalId = other._animalId;
            _loggingRootPath = other._loggingRootPath;
            _remoteTransferRootPath = other._remoteTransferRootPath;
            _chargeTime = other._chargeTime;
            _minimumPokeTime = other._minimumPokeTime;
            _maximumPokeTime = other._maximumPokeTime;
            _robocopyTimeInterval = other._robocopyTimeInterval;
            _maxVideoLength = other._maxVideoLength;
            _minOdorDelivery = other._minOdorDelivery;
            _maxOdorDelivery = other._maxOdorDelivery;
            _switchTime1 = other._switchTime1;
            _switchTime2 = other._switchTime2;
            _vacuumDelay = other._vacuumDelay;
            _vacuumDuration = other._vacuumDuration;
            _useVacuum = other._useVacuum;
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="animalId")]
        public string AnimalId
        {
            get
            {
                return _animalId;
            }
            set
            {
                _animalId = value;
            }
        }
    
        /// <summary>
        /// The local root foleder to save data for this session
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="loggingRootPath")]
        [System.ComponentModel.DescriptionAttribute("The local root foleder to save data for this session")]
        public string LoggingRootPath
        {
            get
            {
                return _loggingRootPath;
            }
            set
            {
                _loggingRootPath = value;
            }
        }
    
        /// <summary>
        /// The path of the remote folder to copy local data to, with time interval specified by robocopyTimeInterval
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="remoteTransferRootPath")]
        [System.ComponentModel.DescriptionAttribute("The path of the remote folder to copy local data to, with time interval specified" +
            " by robocopyTimeInterval")]
        public string RemoteTransferRootPath
        {
            get
            {
                return _remoteTransferRootPath;
            }
            set
            {
                _remoteTransferRootPath = value;
            }
        }
    
        /// <summary>
        /// How long to wait for active odor line to charge in seconds
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="chargeTime")]
        [System.ComponentModel.DescriptionAttribute("How long to wait for active odor line to charge in seconds")]
        public double ChargeTime
        {
            get
            {
                return _chargeTime;
            }
            set
            {
                _chargeTime = value;
            }
        }
    
        /// <summary>
        /// Minimum poke time. Minimum time before a poke is considered 'active' in seconds
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="minimumPokeTime")]
        [System.ComponentModel.DescriptionAttribute("Minimum poke time. Minimum time before a poke is considered \'active\' in seconds")]
        public double MinimumPokeTime
        {
            get
            {
                return _minimumPokeTime;
            }
            set
            {
                _minimumPokeTime = value;
            }
        }
    
        /// <summary>
        /// Maximum poke time. Poke should be aborted after this time in seconds
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="maximumPokeTime")]
        [System.ComponentModel.DescriptionAttribute("Maximum poke time. Poke should be aborted after this time in seconds")]
        public double MaximumPokeTime
        {
            get
            {
                return _maximumPokeTime;
            }
            set
            {
                _maximumPokeTime = value;
            }
        }
    
        /// <summary>
        /// Interval between robocopy initiations in seconds
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="robocopyTimeInterval")]
        [System.ComponentModel.DescriptionAttribute("Interval between robocopy initiations in seconds")]
        public double RobocopyTimeInterval
        {
            get
            {
                return _robocopyTimeInterval;
            }
            set
            {
                _robocopyTimeInterval = value;
            }
        }
    
        /// <summary>
        /// Maximum allowed length of individual video files in seconds
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="maxVideoLength")]
        [System.ComponentModel.DescriptionAttribute("Maximum allowed length of individual video files in seconds")]
        public double MaxVideoLength
        {
            get
            {
                return _maxVideoLength;
            }
            set
            {
                _maxVideoLength = value;
            }
        }
    
        /// <summary>
        /// Minimum required length of odor deliveries in seconds
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="minOdorDelivery")]
        [System.ComponentModel.DescriptionAttribute("Minimum required length of odor deliveries in seconds")]
        public double MinOdorDelivery
        {
            get
            {
                return _minOdorDelivery;
            }
            set
            {
                _minOdorDelivery = value;
            }
        }
    
        /// <summary>
        /// Maximum allowed length of odor deliveries in seconds
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="maxOdorDelivery")]
        [System.ComponentModel.DescriptionAttribute("Maximum allowed length of odor deliveries in seconds")]
        public double MaxOdorDelivery
        {
            get
            {
                return _maxOdorDelivery;
            }
            set
            {
                _maxOdorDelivery = value;
            }
        }
    
        /// <summary>
        /// How long after port valve close to turn off active odor in seconds
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="switchTime1")]
        [System.ComponentModel.DescriptionAttribute("How long after port valve close to turn off active odor in seconds")]
        public double SwitchTime1
        {
            get
            {
                return _switchTime1;
            }
            set
            {
                _switchTime1 = value;
            }
        }
    
        /// <summary>
        /// How long after previous active odor closes to turn on active odor in seconds
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="switchTime2")]
        [System.ComponentModel.DescriptionAttribute("How long after previous active odor closes to turn on active odor in seconds")]
        public double SwitchTime2
        {
            get
            {
                return _switchTime2;
            }
            set
            {
                _switchTime2 = value;
            }
        }
    
        /// <summary>
        /// Initial wait time before opening vacuum in seconds
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="vacuumDelay")]
        [System.ComponentModel.DescriptionAttribute("Initial wait time before opening vacuum in seconds")]
        public double VacuumDelay
        {
            get
            {
                return _vacuumDelay;
            }
            set
            {
                _vacuumDelay = value;
            }
        }
    
        /// <summary>
        /// Duration of vacuum in seconds
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="vacuumDuration")]
        [System.ComponentModel.DescriptionAttribute("Duration of vacuum in seconds")]
        public double VacuumDuration
        {
            get
            {
                return _vacuumDuration;
            }
            set
            {
                _vacuumDuration = value;
            }
        }
    
        /// <summary>
        /// Whether to use vacuum line during odor presentations
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="useVacuum")]
        [System.ComponentModel.DescriptionAttribute("Whether to use vacuum line during odor presentations")]
        public bool UseVacuum
        {
            get
            {
                return _useVacuum;
            }
            set
            {
                _useVacuum = value;
            }
        }
    
        public System.IObservable<Metadata> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Metadata(this)));
        }
    
        public System.IObservable<Metadata> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Metadata(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("animalId = " + _animalId + ", ");
            stringBuilder.Append("loggingRootPath = " + _loggingRootPath + ", ");
            stringBuilder.Append("remoteTransferRootPath = " + _remoteTransferRootPath + ", ");
            stringBuilder.Append("chargeTime = " + _chargeTime + ", ");
            stringBuilder.Append("minimumPokeTime = " + _minimumPokeTime + ", ");
            stringBuilder.Append("maximumPokeTime = " + _maximumPokeTime + ", ");
            stringBuilder.Append("robocopyTimeInterval = " + _robocopyTimeInterval + ", ");
            stringBuilder.Append("maxVideoLength = " + _maxVideoLength + ", ");
            stringBuilder.Append("minOdorDelivery = " + _minOdorDelivery + ", ");
            stringBuilder.Append("maxOdorDelivery = " + _maxOdorDelivery + ", ");
            stringBuilder.Append("switchTime1 = " + _switchTime1 + ", ");
            stringBuilder.Append("switchTime2 = " + _switchTime2 + ", ");
            stringBuilder.Append("vacuumDelay = " + _vacuumDelay + ", ");
            stringBuilder.Append("vacuumDuration = " + _vacuumDuration + ", ");
            stringBuilder.Append("useVacuum = " + _useVacuum);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class LineMappings
    {
    
        private System.Collections.Generic.List<LineMapping> _odorMap = new System.Collections.Generic.List<LineMapping>();
    
        private int _portLine;
    
        private int _vacuumLine;
    
        private int _auxLine = 0;
    
        public LineMappings()
        {
        }
    
        protected LineMappings(LineMappings other)
        {
            _odorMap = other._odorMap;
            _portLine = other._portLine;
            _vacuumLine = other._vacuumLine;
            _auxLine = other._auxLine;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="odorMap")]
        public System.Collections.Generic.List<LineMapping> OdorMap
        {
            get
            {
                return _odorMap;
            }
            set
            {
                _odorMap = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="portLine")]
        public int PortLine
        {
            get
            {
                return _portLine;
            }
            set
            {
                _portLine = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="vacuumLine")]
        public int VacuumLine
        {
            get
            {
                return _vacuumLine;
            }
            set
            {
                _vacuumLine = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="auxLine")]
        public int AuxLine
        {
            get
            {
                return _auxLine;
            }
            set
            {
                _auxLine = value;
            }
        }
    
        public System.IObservable<LineMappings> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LineMappings(this)));
        }
    
        public System.IObservable<LineMappings> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LineMappings(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("odorMap = " + _odorMap + ", ");
            stringBuilder.Append("portLine = " + _portLine + ", ");
            stringBuilder.Append("vacuumLine = " + _vacuumLine + ", ");
            stringBuilder.Append("auxLine = " + _auxLine);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<LineMapping> source)
        {
            return Process<LineMapping>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LineCommand> source)
        {
            return Process<LineCommand>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CameraCommand> source)
        {
            return Process<CameraCommand>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CameraProperties> source)
        {
            return Process<CameraProperties>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpProperties> source)
        {
            return Process<HarpProperties>(source);
        }

        public System.IObservable<string> Process(System.IObservable<DelphiSession> source)
        {
            return Process<DelphiSession>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Metadata> source)
        {
            return Process<Metadata>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LineMappings> source)
        {
            return Process<LineMappings>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LineMapping>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LineCommand>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CameraCommand>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CameraProperties>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpProperties>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<DelphiSession>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Metadata>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LineMappings>))]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<DelphiSession>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}