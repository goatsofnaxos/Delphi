//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace DcDataSchema
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HarpProperties
    {
    
        private string _comPort = "COM3";
    
        private bool _showHarpLeds = false;
    
        public HarpProperties()
        {
        }
    
        protected HarpProperties(HarpProperties other)
        {
            _comPort = other._comPort;
            _showHarpLeds = other._showHarpLeds;
        }
    
        /// <summary>
        /// COM port to connect HARP board.
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="comPort")]
        [System.ComponentModel.DescriptionAttribute("COM port to connect HARP board.")]
        public string ComPort
        {
            get
            {
                return _comPort;
            }
            set
            {
                _comPort = value;
            }
        }
    
        /// <summary>
        /// Whether HARP device LEDs should be on
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="showHarpLeds")]
        [System.ComponentModel.DescriptionAttribute("Whether HARP device LEDs should be on")]
        public bool ShowHarpLeds
        {
            get
            {
                return _showHarpLeds;
            }
            set
            {
                _showHarpLeds = value;
            }
        }
    
        public System.IObservable<HarpProperties> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpProperties(this)));
        }
    
        public System.IObservable<HarpProperties> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpProperties(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("comPort = " + _comPort + ", ");
            stringBuilder.Append("showHarpLeds = " + _showHarpLeds);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class DelphiSessionDc
    {
    
        private Metadata _metadata;
    
        private HarpProperties _harpProperties;
    
        public DelphiSessionDc()
        {
        }
    
        protected DelphiSessionDc(DelphiSessionDc other)
        {
            _metadata = other._metadata;
            _harpProperties = other._harpProperties;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="metadata")]
        public Metadata Metadata
        {
            get
            {
                return _metadata;
            }
            set
            {
                _metadata = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="harpProperties")]
        public HarpProperties HarpProperties
        {
            get
            {
                return _harpProperties;
            }
            set
            {
                _harpProperties = value;
            }
        }
    
        public System.IObservable<DelphiSessionDc> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new DelphiSessionDc(this)));
        }
    
        public System.IObservable<DelphiSessionDc> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new DelphiSessionDc(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("metadata = " + _metadata + ", ");
            stringBuilder.Append("harpProperties = " + _harpProperties);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Metadata
    {
    
        private string _animalId = "";
    
        private int _vacuumCloseTime = 1000;
    
        private int _odorDeliveryTime = 1000;
    
        private int _odorTransitionTime = 1000;
    
        private int _vacuumSetupTime = 1000;
    
        private int _finalValveEnergizedTime = 1000;
    
        private int _minimumPokeTime = 1000;
    
        public Metadata()
        {
        }
    
        protected Metadata(Metadata other)
        {
            _animalId = other._animalId;
            _vacuumCloseTime = other._vacuumCloseTime;
            _odorDeliveryTime = other._odorDeliveryTime;
            _odorTransitionTime = other._odorTransitionTime;
            _vacuumSetupTime = other._vacuumSetupTime;
            _finalValveEnergizedTime = other._finalValveEnergizedTime;
            _minimumPokeTime = other._minimumPokeTime;
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="animalId")]
        public string AnimalId
        {
            get
            {
                return _animalId;
            }
            set
            {
                _animalId = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="vacuumCloseTime")]
        public int VacuumCloseTime
        {
            get
            {
                return _vacuumCloseTime;
            }
            set
            {
                _vacuumCloseTime = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="odorDeliveryTime")]
        public int OdorDeliveryTime
        {
            get
            {
                return _odorDeliveryTime;
            }
            set
            {
                _odorDeliveryTime = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="odorTransitionTime")]
        public int OdorTransitionTime
        {
            get
            {
                return _odorTransitionTime;
            }
            set
            {
                _odorTransitionTime = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="vacuumSetupTime")]
        public int VacuumSetupTime
        {
            get
            {
                return _vacuumSetupTime;
            }
            set
            {
                _vacuumSetupTime = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="finalValveEnergizedTime")]
        public int FinalValveEnergizedTime
        {
            get
            {
                return _finalValveEnergizedTime;
            }
            set
            {
                _finalValveEnergizedTime = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="minimumPokeTime")]
        public int MinimumPokeTime
        {
            get
            {
                return _minimumPokeTime;
            }
            set
            {
                _minimumPokeTime = value;
            }
        }
    
        public System.IObservable<Metadata> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Metadata(this)));
        }
    
        public System.IObservable<Metadata> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Metadata(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("animalId = " + _animalId + ", ");
            stringBuilder.Append("vacuumCloseTime = " + _vacuumCloseTime + ", ");
            stringBuilder.Append("odorDeliveryTime = " + _odorDeliveryTime + ", ");
            stringBuilder.Append("odorTransitionTime = " + _odorTransitionTime + ", ");
            stringBuilder.Append("vacuumSetupTime = " + _vacuumSetupTime + ", ");
            stringBuilder.Append("finalValveEnergizedTime = " + _finalValveEnergizedTime + ", ");
            stringBuilder.Append("minimumPokeTime = " + _minimumPokeTime);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<HarpProperties> source)
        {
            return Process<HarpProperties>(source);
        }

        public System.IObservable<string> Process(System.IObservable<DelphiSessionDc> source)
        {
            return Process<DelphiSessionDc>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Metadata> source)
        {
            return Process<Metadata>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.4.0.0 (YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpProperties>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<DelphiSessionDc>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Metadata>))]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<DelphiSessionDc>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}